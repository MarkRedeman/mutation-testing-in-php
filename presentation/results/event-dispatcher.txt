Humbug running test suite to generate logs and code coverage data...
Humbug has completed the initial test run successfully.
Tests: 89 Line Coverage: 85.28%
Humbug is analysing source files...
Mutation Testing is commencing on 11 files...
(.: killed, M: escaped, S: uncovered, E: fatal error, T: timed out)
.M....M.....S...MMSSSS.M..M.SSSSS.............M...MM..MM.... |   60 ( 3/11)
....M..S....S..E.....SS.ME..M.SM.MSEMMMSSSSSSSSSSSSSSSSSSSSS |  120 ( 7/11)
SS.....
127 mutations were generated:
      66 mutants were killed
      39 mutants were not covered by tests
      19 covered mutants were not detected
       3 fatal errors were encountered
       0 time outs were encountered

Metrics:
    Mutation Score Indicator (MSI): 54%
    Mutation Code Coverage: 69%
    Covered Code MSI: 78%

Remember that some mutants will inevitably be harmless (i.e. false positives).
Time: 19.73 seconds Memory: 9.50MB
Humbug results are being logged as TEXT to: humbuglog.txt
------
Escapes
------


1) \Humbug\Mutator\Boolean\LogicalOr
Diff on \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher::addListenerService() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/ContainerAwareEventDispatcher.php:
--- Original
+++ New
@@ @@
     {
-        if (!is_array($callback) || 2 !== count($callback)) {
+        if (!is_array($callback) && 2 !== count($callback)) {
             throw new \InvalidArgumentException('Expected an array("service", "method") argument');
         }

         $this->listenerIds[$eventName][] = array($callback[0], $callback[1], $priority);
     }



2) \Humbug\Mutator\Boolean\LogicalAnd
Diff on \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher::removeListener() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/ContainerAwareEventDispatcher.php:
--- Original
+++ New
@@ @@
                 $key = $serviceId.'.'.$method;
-                if (isset($this->listeners[$eventName][$key]) && $listener === array($this->listeners[$eventName][$key], $method)) {
+                if (isset($this->listeners[$eventName][$key]) || $listener === array($this->listeners[$eventName][$key], $method)) {
                     unset($this->listeners[$eventName][$key]);
                     if (empty($this->listeners[$eventName])) {
                         unset($this->listeners[$eventName]);
                     }
                     unset($this->listenerIds[$eventName][$i]);
                     if (empty($this->listenerIds[$eventName])) {


3) \Humbug\Mutator\Number\IntegerValue
Diff on \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher::addSubscriberService() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/ContainerAwareEventDispatcher.php:
--- Original
+++ New
@@ @@
             } elseif (is_string($params[0])) {
-                $this->listenerIds[$eventName][] = array($serviceId, $params[0], isset($params[1]) ? $params[1] : 0);
+                $this->listenerIds[$eventName][] = array($serviceId, $params[0], isset($params[1]) ? $params[0] : 0);
             } else {
                 foreach ($params as $listener) {
                     $this->listenerIds[$eventName][] = array($serviceId, $listener[0], isset($listener[1]) ? $listener[1] : 0);
                 }
             }
         }


4) \Humbug\Mutator\Number\IntegerValue
Diff on \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher::addSubscriberService() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/ContainerAwareEventDispatcher.php:
--- Original
+++ New
@@ @@
             } elseif (is_string($params[0])) {
-                $this->listenerIds[$eventName][] = array($serviceId, $params[0], isset($params[1]) ? $params[1] : 0);
+                $this->listenerIds[$eventName][] = array($serviceId, $params[0], isset($params[1]) ? $params[1] : 1);
             } else {
                 foreach ($params as $listener) {
                     $this->listenerIds[$eventName][] = array($serviceId, $listener[0], isset($listener[1]) ? $listener[1] : 0);
                 }
             }
         }


5) \Humbug\Mutator\ConditionalNegation\NotIdentical
Diff on \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher::lazyLoad() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/ContainerAwareEventDispatcher.php:
--- Original
+++ New
@@ @@
                     $this->addListener($eventName, array($listener, $method), $priority);
-                } elseif ($listener !== $this->listeners[$eventName][$key]) {
+                } elseif ($listener === $this->listeners[$eventName][$key]) {
                     parent::removeListener($eventName, array($this->listeners[$eventName][$key], $method));
                     $this->addListener($eventName, array($listener, $method), $priority);
                 }

                 $this->listeners[$eventName][$key] = $listener;
             }


6) \Humbug\Mutator\Boolean\LogicalNot
Diff on \Symfony\Component\EventDispatcher\DependencyInjection\RegisterListenersPass::process() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/DependencyInjection/RegisterListenersPass.php:
--- Original
+++ New
@@ @@
     {
-        if (!$container->hasDefinition($this->dispatcherService) && !$container->hasAlias($this->dispatcherService)) {
+        if (!$container->hasDefinition($this->dispatcherService) && $container->hasAlias($this->dispatcherService)) {
             return;
         }

         $definition = $container->findDefinition($this->dispatcherService);

         foreach ($container->findTaggedServiceIds($this->listenerTag) as $id => $events) {


7) \Humbug\Mutator\Boolean\TrueValue
Diff on \Symfony\Component\EventDispatcher\EventDispatcher::removeListener() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/EventDispatcher.php:
--- Original
+++ New
@@ @@
         foreach ($this->listeners[$eventName] as $priority => $listeners) {
-            if (false !== ($key = array_search($listener, $listeners, true))) {
+            if (false !== ($key = array_search($listener, $listeners, false))) {
                 unset($this->listeners[$eventName][$priority][$key], $this->sorted[$eventName]);
             }
         }
     }

     /**


8) \Humbug\Mutator\Number\IntegerValue
Diff on \Symfony\Component\EventDispatcher\EventDispatcher::addSubscriber() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/EventDispatcher.php:
--- Original
+++ New
@@ @@
             } elseif (is_string($params[0])) {
-                $this->addListener($eventName, array($subscriber, $params[0]), isset($params[1]) ? $params[1] : 0);
+                $this->addListener($eventName, array($subscriber, $params[0]), isset($params[1]) ? $params[0] : 0);
             } else {
                 foreach ($params as $listener) {
                     $this->addListener($eventName, array($subscriber, $listener[0]), isset($listener[1]) ? $listener[1] : 0);
                 }
             }
         }


9) \Humbug\Mutator\Number\IntegerValue
Diff on \Symfony\Component\EventDispatcher\EventDispatcher::addSubscriber() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/EventDispatcher.php:
--- Original
+++ New
@@ @@
             } elseif (is_string($params[0])) {
-                $this->addListener($eventName, array($subscriber, $params[0]), isset($params[1]) ? $params[1] : 0);
+                $this->addListener($eventName, array($subscriber, $params[0]), isset($params[1]) ? $params[1] : 1);
             } else {
                 foreach ($params as $listener) {
                     $this->addListener($eventName, array($subscriber, $listener[0]), isset($listener[1]) ? $listener[1] : 0);
                 }
             }
         }


10) \Humbug\Mutator\Number\IntegerValue
Diff on \Symfony\Component\EventDispatcher\EventDispatcher::addSubscriber() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/EventDispatcher.php:
--- Original
+++ New
@@ @@
                 foreach ($params as $listener) {
-                    $this->addListener($eventName, array($subscriber, $listener[0]), isset($listener[1]) ? $listener[1] : 0);
+                    $this->addListener($eventName, array($subscriber, $listener[0]), isset($listener[1]) ? $listener[0] : 0);
                 }
             }
         }
     }

     /**


11) \Humbug\Mutator\Number\IntegerValue
Diff on \Symfony\Component\EventDispatcher\EventDispatcher::addSubscriber() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/EventDispatcher.php:
--- Original
+++ New
@@ @@
                 foreach ($params as $listener) {
-                    $this->addListener($eventName, array($subscriber, $listener[0]), isset($listener[1]) ? $listener[1] : 0);
+                    $this->addListener($eventName, array($subscriber, $listener[0]), isset($listener[1]) ? $listener[1] : 1);
                 }
             }
         }
     }

     /**


12) \Humbug\Mutator\ConditionalNegation\Identical
Diff on \Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher::removeListener() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php:
--- Original
+++ New
@@ @@
             foreach ($this->wrappedListeners[$eventName] as $index => $wrappedListener) {
-                if ($wrappedListener->getWrappedListener() === $listener) {
+                if ($wrappedListener->getWrappedListener() !== $listener) {
                     $listener = $wrappedListener;
                     unset($this->wrappedListeners[$eventName][$index]);
                     break;
                 }
             }
         }


13) \Humbug\Mutator\Boolean\LogicalAnd
Diff on \Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher::getListenerInfo() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php:
--- Original
+++ New
@@ @@
             );
-        } elseif (is_array($listener) || (is_object($listener) && is_callable($listener))) {
+        } elseif (is_array($listener) || (is_object($listener) || is_callable($listener))) {
             if (!is_array($listener)) {
                 $listener = array($listener, '__invoke');
             }
             $class = is_object($listener[0]) ? get_class($listener[0]) : $listener[0];
             try {
                 $r = new \ReflectionMethod($class, $listener[1]);


14) \Humbug\Mutator\Number\IntegerValue
Diff on \Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher::getListenerInfo() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php:
--- Original
+++ New
@@ @@
             }
-            $class = is_object($listener[0]) ? get_class($listener[0]) : $listener[0];
+            $class = is_object($listener[0]) ? get_class($listener[0]) : $listener[1];
             try {
                 $r = new \ReflectionMethod($class, $listener[1]);
                 $file = $r->getFileName();
                 $line = $r->getStartLine();
             } catch (\ReflectionException $e) {
                 $file = null;


15) \Humbug\Mutator\Number\IntegerValue
Diff on \Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher::getListenerInfo() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php:
--- Original
+++ New
@@ @@
                 'class' => $class,
-                'method' => $listener[1],
+                'method' => $listener[0],
                 'file' => $file,
                 'line' => $line,
                 'pretty' => $class.'::'.$listener[1],
             );
         }



16) \Humbug\Mutator\Boolean\TrueValue
Diff on \Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher::getListenerPriority() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php:
--- Original
+++ New
@@ @@
         try {
-            $allListeners = $this->getListeners(null, true);
+            $allListeners = $this->getListeners(null, false);
         } catch (\Exception $e) {
             if (null !== $this->logger) {
                 $this->logger->info('An exception was thrown while getting the listeners.', array('exception' => $e));
             }

             return;


17) \Humbug\Mutator\Number\IntegerValue
Diff on \Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher::getListenerPriority() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php:
--- Original
+++ New
@@ @@
             foreach ($listeners as $listener) {
-                if (is_array($listenerWrapper) && $listenerWrapper[0] === $listener[0]) {
+                if (is_array($listenerWrapper) && $listenerWrapper[1] === $listener[0]) {
                     return $priority;
                 }
             }
         }
     }



18) \Humbug\Mutator\ConditionalNegation\Identical
Diff on \Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher::getListenerPriority() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php:
--- Original
+++ New
@@ @@
             foreach ($listeners as $listener) {
-                if (is_array($listenerWrapper) && $listenerWrapper[0] === $listener[0]) {
+                if (is_array($listenerWrapper) && $listenerWrapper[0] !== $listener[0]) {
                     return $priority;
                 }
             }
         }
     }



19) \Humbug\Mutator\Number\IntegerValue
Diff on \Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher::getListenerPriority() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php:
--- Original
+++ New
@@ @@
             foreach ($listeners as $listener) {
-                if (is_array($listenerWrapper) && $listenerWrapper[0] === $listener[0]) {
+                if (is_array($listenerWrapper) && $listenerWrapper[0] === $listener[1]) {
                     return $priority;
                 }
             }
         }
     }



------
Errors
------


1) \Humbug\Mutator\ConditionalNegation\NotIdentical
Diff on \Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher::postProcess() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php:
--- Original
+++ New
@@ @@
             if ($listener->wasCalled()) {
-                if (null !== $this->logger) {
+                if (null === $this->logger) {
                     $this->logger->debug(sprintf('Notified event "%s" to listener "%s".', $eventName, $info['pretty']));
                 }

                 if (!isset($this->called[$eventName])) {
                     $this->called[$eventName] = new \SplObjectStorage();
                 }

The following output was received on stderr:

PHP Fatal error:  Call to a member function debug() on a non-object in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php on line 257
PHP Stack trace:
PHP   1. {main}() /home/mark/.composer/vendor/phpunit/phpunit/phpunit:0
PHP   2. PHPUnit_TextUI_Command::main() /home/mark/.composer/vendor/phpunit/phpunit/phpunit:47
PHP   3. PHPUnit_TextUI_Command->run() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/Command.php:100
PHP   4. PHPUnit_TextUI_TestRunner->doRun() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/Command.php:148
PHP   5. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/TestRunner.php:432
PHP   6. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   7. PHPUnit_Framework_TestCase->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   8. PHPUnit_Framework_TestResult->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:702
PHP   9. PHPUnit_Framework_TestCase->runBare() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestResult.php:601
PHP  10. PHPUnit_Framework_TestCase->runTest() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:746
PHP  11. ReflectionMethod->invokeArgs() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  12. Symfony\Component\EventDispatcher\Tests\Debug\TraceableEventDispatcherTest->testGetCalledListeners() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  13. Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher->dispatch() /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Tests/Debug/TraceableEventDispatcherTest.php:84
PHP  14. Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher->postProcess() /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php:131



2) \Humbug\Mutator\Boolean\LogicalNot
Diff on \Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher::getListenerInfo() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php:
--- Original
+++ New
@@ @@
         } elseif (is_array($listener) || (is_object($listener) && is_callable($listener))) {
-            if (!is_array($listener)) {
+            if (is_array($listener)) {
                 $listener = array($listener, '__invoke');
             }
             $class = is_object($listener[0]) ? get_class($listener[0]) : $listener[0];
             try {
                 $r = new \ReflectionMethod($class, $listener[1]);
                 $file = $r->getFileName();

The following output was received on stderr:

PHP Fatal error:  Cannot use object of type Symfony\Component\EventDispatcher\Debug\WrappedListener as array in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php on line 320
PHP Stack trace:
PHP   1. {main}() /home/mark/.composer/vendor/phpunit/phpunit/phpunit:0
PHP   2. PHPUnit_TextUI_Command::main() /home/mark/.composer/vendor/phpunit/phpunit/phpunit:47
PHP   3. PHPUnit_TextUI_Command->run() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/Command.php:100
PHP   4. PHPUnit_TextUI_TestRunner->doRun() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/Command.php:148
PHP   5. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/TestRunner.php:432
PHP   6. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   7. PHPUnit_Framework_TestCase->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   8. PHPUnit_Framework_TestResult->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:702
PHP   9. PHPUnit_Framework_TestCase->runBare() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestResult.php:601
PHP  10. PHPUnit_Framework_TestCase->runTest() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:746
PHP  11. ReflectionMethod->invokeArgs() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  12. Symfony\Component\EventDispatcher\Tests\Debug\TraceableEventDispatcherTest->testDispatchNested() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  13. Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher->dispatch() /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Tests/Debug/TraceableEventDispatcherTest.php:160
PHP  14. Symfony\Component\EventDispatcher\EventDispatcher->dispatch() /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php:124
PHP  15. Symfony\Component\EventDispatcher\EventDispatcher->doDispatch() /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/EventDispatcher.php:43
PHP  16. call_user_func() /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/EventDispatcher.php:159
PHP  17. Symfony\Component\EventDispatcher\Debug\WrappedListener->__invoke() /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/EventDispatcher.php:159
PHP  18. call_user_func() /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/WrappedListener.php:61
PHP  19. Symfony\Component\EventDispatcher\Tests\Debug\TraceableEventDispatcherTest->Symfony\Component\EventDispatcher\Tests\Debug\{closure}() /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/WrappedListener.php:61
PHP  20. Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher->dispatch() /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Tests/Debug/TraceableEventDispatcherTest.php:156
PHP  21. Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher->preProcess() /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php:119
PHP  22. Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher->getListenerInfo() /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php:234



3) \Humbug\Mutator\Boolean\LogicalAnd
Diff on \Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher::getListenerPriority() in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php:
--- Original
+++ New
@@ @@
             foreach ($listeners as $listener) {
-                if (is_array($listenerWrapper) && $listenerWrapper[0] === $listener[0]) {
+                if (is_array($listenerWrapper) || $listenerWrapper[0] === $listener[0]) {
                     return $priority;
                 }
             }
         }
     }


The following output was received on stderr:

PHP Fatal error:  Cannot use object of type Closure as array in /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php on line 357
PHP Stack trace:
PHP   1. {main}() /home/mark/.composer/vendor/phpunit/phpunit/phpunit:0
PHP   2. PHPUnit_TextUI_Command::main() /home/mark/.composer/vendor/phpunit/phpunit/phpunit:47
PHP   3. PHPUnit_TextUI_Command->run() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/Command.php:100
PHP   4. PHPUnit_TextUI_TestRunner->doRun() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/Command.php:148
PHP   5. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/TestRunner.php:432
PHP   6. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   7. PHPUnit_Framework_TestCase->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   8. PHPUnit_Framework_TestResult->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:702
PHP   9. PHPUnit_Framework_TestCase->runBare() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestResult.php:601
PHP  10. PHPUnit_Framework_TestCase->runTest() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:746
PHP  11. ReflectionMethod->invokeArgs() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  12. Symfony\Component\EventDispatcher\Tests\Debug\TraceableEventDispatcherTest->testGetCalledListeners() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  13. Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher->getCalledListeners() /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Tests/Debug/TraceableEventDispatcherTest.php:86
PHP  14. Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher->getListenerPriority() /home/mark/Projects/talks/mutating-php/examples/event-dispatcher/Debug/TraceableEventDispatcher.php:144


