"summary": {
    "total": 26,
    "kills": 23,
    "escapes": 1,
    "errors": 0,
    "timeouts": 0,
    "notests": 2,
    "covered_score": 96,
    "combined_score": 88,
    "mutation_coverage": 92
},
"escaped": [
{
    "file": "src\/BroadwayDemo\/Basket\/Basket.php",
    "mutator": "\\Humbug\\Mutator\\ConditionalBoundary\\GreaterThan",
    "class": "\\BroadwayDemo\\Basket\\Basket",
    "method": "productIsInBasket",
    "line": 101,
    "diff": "--- Original\n+++ New\n@@ @@\n     {\n-        return isset($this->productCountById[$productId]) && $this->productCountById[$productId] > 0;\n+        return isset($this->productCountById[$productId]) && $this->productCountById[$productId] >= 0;\n     }\n \n     public function checkout()\n     {\n         if (count($this->productCountById) === 0) {\n             throw new EmptyBasketException('Cannot checkout an empty basket');",
    "tests": [
        "BroadwayDemo\\Basket\\AddProductToBasketTest::it_adds_a_product_to_a_basket",
        "BroadwayDemo\\Basket\\AddProductToBasketTest::multiple_products_can_be_added_to_a_basket",
        "BroadwayDemo\\Basket\\AddProductToBasketTest::a_product_can_be_added_to_a_basket_multiple_times",
        "BroadwayDemo\\Basket\\CheckoutTest::it_checks_out_a_basket",
        "BroadwayDemo\\Basket\\CheckoutTest::it_cannot_checkout_a_basket_that_has_been_emptied",
        "BroadwayDemo\\Basket\\CheckoutTest::nothing_happens_when_checking_out_a_basket_for_a_second_time",
        "BroadwayDemo\\Basket\\RemoveProductFromBasketTest::it_removes_a_product_that_was_added",
        "BroadwayDemo\\Basket\\RemoveProductFromBasketTest::it_does_nothing_when_removing_a_product_that_is_not_in_a_basket",
        "BroadwayDemo\\Basket\\RemoveProductFromBasketTest::it_only_removes_one_instance_of_a_product"
    ],
    "stderr": "",
    "stdout": "TAP version 13"
}
],