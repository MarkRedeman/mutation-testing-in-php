Humbug running test suite to generate logs and code coverage data...
Humbug has completed the initial test run successfully.
Tests: 262 Line Coverage: 100.00%
Humbug is analysing source files...
Mutation Testing is commencing on 51 files...
(.: killed, M: escaped, S: uncovered, E: fatal error, T: timed out)
.....................S....S...........M........M.M..S...M... |   60 (14/51)
.......M..M.M...M....................M..........M....S...... |  120 (35/51)
SSSSSSSSSSSSSSS.SSSSSSSS.S....M.....M....................... |  180 (47/51)
M............M........M.
204 mutations were generated:
     161 mutants were killed
      28 mutants were not covered by tests
      15 covered mutants were not detected
       0 fatal errors were encountered
       0 time outs were encountered

Metrics:
    Mutation Score Indicator (MSI): 79%
    Mutation Code Coverage: 86%
    Covered Code MSI: 91%

Remember that some mutants will inevitably be harmless (i.e. false positives).
Time: 52.9 seconds Memory: 8.25MB
Humbug results are being logged as JSON to: humbuglog.json
Humbug results are being logged as TEXT to: humbuglog.txt
------
Escapes
------


1) \Humbug\Mutator\ConditionalNegation\NotIdentical
Diff on \HylianShield\Validator\String\Subset::createValidator() in /home/mark/Projects/talks/mutating-php/examples/hylianshield/src/HylianShield/Validator/String/Subset.php:
--- Original
+++ New
@@ @@
         // If the internal and current regex encoding don't match, use a specialized validator.
-        if ($encoding !== $originalEncoding) {
+        if ($encoding === $originalEncoding) {
             return function ($subject) use ($pattern, $encoding, $originalEncoding) {
                 // Set the regex encoding to an encoding that supports our range.
                 mb_regex_encoding($encoding);

                 // Check if the subject matches the pattern.
                 $valid = is_string($subject) && (


2) \Humbug\Mutator\Boolean\LogicalOr
Diff on \HylianShield\Validator\String\Subset::getRange() in /home/mark/Projects/talks/mutating-php/examples/hylianshield/src/HylianShield/Validator/String/Subset.php:
--- Original
+++ New
@@ @@
         // Check if the implementation is in place.
-        if (!is_array($this->ranges) || empty($this->ranges)) {
+        if (!is_array($this->ranges) && empty($this->ranges)) {
             // @codeCoverageIgnoreStart
             throw new LogicException(
                 'No character ranges implemented. Expected list of ranges in $this->ranges.'
             );
             // @codeCoverageIgnoreEnd
         }


3) \Humbug\Mutator\Boolean\LogicalOr
Diff on \HylianShield\Validator\String\Subset::getRange() in /home/mark/Projects/talks/mutating-php/examples/hylianshield/src/HylianShield/Validator/String/Subset.php:
--- Original
+++ New
@@ @@
         foreach ($this->ranges as $range) {
-            if (!is_array($range) || count($range) !== 2) {
+            if (!is_array($range) && count($range) !== 2) {
                 // @codeCoverageIgnoreStart
                 throw new LogicException(
                     'Invalid range encountered: (' . gettype($range) . ') '
                     . var_export($range, true)
                 );
                 // @codeCoverageIgnoreEnd


4) \Humbug\Mutator\Number\IntegerValue
Diff on \HylianShield\Validator\CoreArray\Numeric::createValidator() in /home/mark/Projects/talks/mutating-php/examples/hylianshield/src/HylianShield/Validator/CoreArray/Numeric.php:
--- Original
+++ New
@@ @@
             $arrayLength = count($keys);
-            for ($i = 0; $i < $arrayLength; $i++) {
+            for ($i = 1; $i < $arrayLength; $i++) {
                 if ($i !== $keys[$i]) {
                     return false;
                 }
             }

             return true;


5) \Humbug\Mutator\Boolean\TrueValue
Diff on \HylianShield\Validator\CoreClass\Exists::__construct() in /home/mark/Projects/talks/mutating-php/examples/hylianshield/src/HylianShield/Validator/CoreClass/Exists.php:
--- Original
+++ New
@@ @@
                 'Supplied argument is not a boolean: ' . gettype($useAutoloader)
-                . ') ' . var_export($useAutoloader, true)
+                . ') ' . var_export($useAutoloader, false)
             );
         }

         // Add a wrapper around class exists, so we can tell when to use the autoloader.
         $this->validator = function ($class) use ($useAutoloader) {
             return class_exists($class, $useAutoloader);


6) \Humbug\Mutator\Boolean\TrueValue
Diff on \HylianShield\Validator\CoreClass\Instance::__construct() in /home/mark/Projects/talks/mutating-php/examples/hylianshield/src/HylianShield/Validator/CoreClass/Instance.php:
--- Original
+++ New
@@ @@
                 'Class must be a string: (' . gettype($class) . ') '
-                . var_export($class, true)
+                . var_export($class, false)
             );
         }

         // Create a validator on the fly.
         $this->validator = function ($instance) use ($class) {
             return $instance instanceof $class;


7) \Humbug\Mutator\Boolean\TrueValue
Diff on \HylianShield\Validator\CoreClass\Method::__construct() in /home/mark/Projects/talks/mutating-php/examples/hylianshield/src/HylianShield/Validator/CoreClass/Method.php:
--- Original
+++ New
@@ @@
                 'Pattern must be a valid class: (' . gettype($class) . ') '
-                . var_export($class, true)
+                . var_export($class, false)
             );
         }

         // Create a validator on the fly.
         $this->validator = function ($method) use ($class) {
             return is_string($method) && method_exists($class, $method);


8) \Humbug\Mutator\Boolean\TrueValue
Diff on \HylianShield\Validator\Regexp::__construct() in /home/mark/Projects/talks/mutating-php/examples/hylianshield/src/HylianShield/Validator/Regexp.php:
--- Original
+++ New
@@ @@
                 'Pattern must be a string: (' . gettype($pattern) . ') '
-                . var_export($pattern, true)
+                . var_export($pattern, false)
             );
         }

         // The first character will be the delimiter.
         $delim = mb_substr($pattern, 0, 1);



9) \Humbug\Mutator\Number\IntegerValue
Diff on \HylianShield\Validator\Financial\SEPA\CreditorIdentifier::createValidator() in /home/mark/Projects/talks/mutating-php/examples/hylianshield/src/HylianShield/Validator/Financial/SEPA/CreditorIdentifier.php:
--- Original
+++ New
@@ @@
             // Numerize using A=10, B=11 ... Z=35.
-            $numerizedId = str_replace(range('A', 'Z'), range(10, 35), $numerizedIban);
+            $numerizedId = str_replace(range('A', 'Z'), range(10, 36), $numerizedIban);

             // Do the mod 97 check.
             $calccontrol = 98 - bcmod($numerizedId, 97);

             return $control === $calccontrol;
         };


10) \Humbug\Mutator\Number\IntegerValue
Diff on \HylianShield\Validator\Financial\Iban::createValidator() in /home/mark/Projects/talks/mutating-php/examples/hylianshield/src/HylianShield/Validator/Financial/Iban.php:
--- Original
+++ New
@@ @@
             // Numerize using A=10, B=11 ... Z=35.
-            $numerizedIban = str_replace(range('A', 'Z'), range(10, 35), $numerizedIban);
+            $numerizedIban = str_replace(range('A', 'Z'), range(10, 36), $numerizedIban);

             // Do the mod 97 check.
             $calccontrol = 98 - bcmod($numerizedIban, 97);

             return $control === $calccontrol;
         };


11) \Humbug\Mutator\ConditionalBoundary\LessThan
Diff on \HylianShield\Validator\OneOf::__construct() in /home/mark/Projects/talks/mutating-php/examples/hylianshield/src/HylianShield/Validator/OneOf.php:
--- Original
+++ New
@@ @@
         // We can't have nothing to test.
-        if (count($values) < 1) {
+        if (count($values) <= 1) {
             throw new LogicException('Cannot perform a test on an empty set.');
         }

         // Register the collection identifier.
         $this->collectionIdentifier = implode(', ', $ids);
         unset($ids);


12) \Humbug\Mutator\Boolean\TrueValue
Diff on \HylianShield\Validator\LogicalGate::__construct() in /home/mark/Projects/talks/mutating-php/examples/hylianshield/src/HylianShield/Validator/LogicalGate.php:
--- Original
+++ New
@@ @@
                         'Supplied argument is not a valid instance: ('
-                        . gettype($instance) . ') ' . var_export($instance, true)
+                        . gettype($instance) . ') ' . var_export($instance, false)
                     );
                 }

                 return true;
             }
         );


13) \Humbug\Mutator\ReturnValue\FunctionCall
Diff on \HylianShield\Validator\Encoding\Base64::removeLineFeeds() in /home/mark/Projects/talks/mutating-php/examples/hylianshield/src/HylianShield/Validator/Encoding/Base64.php:
--- Original
+++ New
@@ @@
     {
-        return str_replace($this->getLineFeedCharacters(), '', $message);
+        str_replace($this->getLineFeedCharacters(), '', $message); return null;
     }

     /**
      * Validate the padding of a given message.
      *
      * @param string


14) \Humbug\Mutator\Boolean\LogicalOr
Diff on \HylianShield\Validator\Range\Mutable::__construct() in /home/mark/Projects/talks/mutating-php/examples/hylianshield/src/HylianShield/Validator/Range/Mutable.php:
--- Original
+++ New
@@ @@
         if ((isset($minLength) && !(is_int($minLength) || is_float($minLength)))
-            || (isset($maxLength) && !(is_int($maxLength) || is_float($maxLength)))
+            && (isset($maxLength) && !(is_int($maxLength) || is_float($maxLength)))
         ) {
             // @codeCoverageIgnoreStart
             throw new InvalidArgumentException(
                 'Min and max length should be of type integer or type float.'
             );
             // @codeCoverageIgnoreEnd


15) \Humbug\Mutator\Boolean\TrueValue
Diff on \HylianShield\Validator::getMessage() in /home/mark/Projects/talks/mutating-php/examples/hylianshield/src/HylianShield/Validator.php:
--- Original
+++ New
@@ @@
                 $this->lastMessage = 'Invalid value supplied: (' . gettype($this->lastValue) . ') '
-                    . var_export($this->lastValue, true) . "; Expected: {$this}";
+                    . var_export($this->lastValue, false) . "; Expected: {$this}";
             } else {
                 $this->lastMessage = "Invalid value supplied; Expected: {$this}";
             }
         }

         return $this->lastMessage;

