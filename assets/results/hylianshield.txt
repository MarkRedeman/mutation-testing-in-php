Humbug running test suite to generate logs and code coverage data...
Humbug has completed the initial test run successfully.
Tests: 374 Line Coverage: 100.00%
Humbug is analysing source files...
Mutation Testing is commencing on 66 files...
(.: killed, M: escaped, S: uncovered, E: fatal error, T: timed out)
.....................S....S..............M........M.M..S...M |   60 (14/66)
..........M..M.M..EEE..M..MEME.MEMMMMM....M................. |  120 (39/66)
...M..........M....S......SSSSSSSSSSSSSSS.SSSSSSSS.S....M... |  180 (51/66)
..M..M......................M.....M............M...EE..MM... |  240 (65/66)
.MMMMMM.
248 mutations were generated:
     179 mutants were killed
      28 mutants were not covered by tests
      33 covered mutants were not detected
       8 fatal errors were encountered
       0 time outs were encountered

Metrics:
    Mutation Score Indicator (MSI): 75%
    Mutation Code Coverage: 89%
    Covered Code MSI: 85%

Remember that some mutants will inevitably be harmless (i.e. false positives).
Time: 1.32 minutes Memory: 11.00MB
Humbug results are being logged as TEXT to: humbuglog.txt
------
Escapes
------


1) \Humbug\Mutator\ConditionalNegation\NotIdentical
Diff on \HylianShield\Validator\String\Subset::createValidator() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/String/Subset.php:
--- Original
+++ New
@@ @@
         // If the internal and current regex encoding don't match, use a specialized validator.
-        if ($encoding !== $originalEncoding) {
+        if ($encoding === $originalEncoding) {
             return function ($subject) use ($pattern, $encoding, $originalEncoding) {
                 // Set the regex encoding to an encoding that supports our range.
                 mb_regex_encoding($encoding);

                 // Check if the subject matches the pattern.
                 $valid = is_string($subject) && (


2) \Humbug\Mutator\Boolean\LogicalOr
Diff on \HylianShield\Validator\String\Subset::getRange() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/String/Subset.php:
--- Original
+++ New
@@ @@
         // Check if the implementation is in place.
-        if (!is_array($this->ranges) || empty($this->ranges)) {
+        if (!is_array($this->ranges) && empty($this->ranges)) {
             // @codeCoverageIgnoreStart
             throw new LogicException(
                 'No character ranges implemented. Expected list of ranges in $this->ranges.'
             );
             // @codeCoverageIgnoreEnd
         }


3) \Humbug\Mutator\Boolean\LogicalOr
Diff on \HylianShield\Validator\String\Subset::getRange() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/String/Subset.php:
--- Original
+++ New
@@ @@
         foreach ($this->ranges as $range) {
-            if (!is_array($range) || count($range) !== 2) {
+            if (!is_array($range) && count($range) !== 2) {
                 // @codeCoverageIgnoreStart
                 throw new LogicException(
                     'Invalid range encountered: (' . gettype($range) . ') '
                     . var_export($range, true)
                 );
                 // @codeCoverageIgnoreEnd


4) \Humbug\Mutator\Number\IntegerValue
Diff on \HylianShield\Validator\CoreArray\Numeric::createValidator() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/CoreArray/Numeric.php:
--- Original
+++ New
@@ @@
             $arrayLength = count($keys);
-            for ($i = 0; $i < $arrayLength; $i++) {
+            for ($i = 1; $i < $arrayLength; $i++) {
                 if ($i !== $keys[$i]) {
                     return false;
                 }
             }

             return true;


5) \Humbug\Mutator\Boolean\TrueValue
Diff on \HylianShield\Validator\CoreClass\Exists::__construct() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/CoreClass/Exists.php:
--- Original
+++ New
@@ @@
                 'Supplied argument is not a boolean: ' . gettype($useAutoloader)
-                . ') ' . var_export($useAutoloader, true)
+                . ') ' . var_export($useAutoloader, false)
             );
         }

         // Add a wrapper around class exists, so we can tell when to use the autoloader.
         $this->validator = function ($class) use ($useAutoloader) {
             return class_exists($class, $useAutoloader);


6) \Humbug\Mutator\Boolean\TrueValue
Diff on \HylianShield\Validator\CoreClass\Instance::__construct() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/CoreClass/Instance.php:
--- Original
+++ New
@@ @@
                 'Class must be a string: (' . gettype($class) . ') '
-                . var_export($class, true)
+                . var_export($class, false)
             );
         }

         // Create a validator on the fly.
         $this->validator = function ($instance) use ($class) {
             return $instance instanceof $class;


7) \Humbug\Mutator\Boolean\TrueValue
Diff on \HylianShield\Validator\CoreClass\Method::__construct() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/CoreClass/Method.php:
--- Original
+++ New
@@ @@
                 'Pattern must be a valid class: (' . gettype($class) . ') '
-                . var_export($class, true)
+                . var_export($class, false)
             );
         }

         // Create a validator on the fly.
         $this->validator = function ($method) use ($class) {
             return is_string($method) && method_exists($class, $method);


8) \Humbug\Mutator\ReturnValue\This
Diff on \HylianShield\Validator\Context\Indication\IndicationAbstract::setDescription() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Indication/IndicationAbstract.php:
--- Original
+++ New
@@ @@

-        return $this;
+        return null;
     }

     /**
      * Get the description of the indication.
      *
      * @return string


9) \Humbug\Mutator\ReturnValue\This
Diff on \HylianShield\Validator\Context\Indication\Violation::setCode() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Indication/Violation.php:
--- Original
+++ New
@@ @@

-        return $this;
+        return null;
     }

     /**
      * Get the violation code.
      *
      * @return integer


10) \Humbug\Mutator\ReturnValue\This
Diff on \HylianShield\Validator\Context\Indication\Violation::setContext() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Indication/Violation.php:
--- Original
+++ New
@@ @@

-        return $this;
+        return null;
     }

     /**
      * Get the context parameters of the violation.
      *
      * @return array


11) \Humbug\Mutator\ReturnValue\This
Diff on \HylianShield\Validator\Context\Indication\Assertion::setResult() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Indication/Assertion.php:
--- Original
+++ New
@@ @@

-        return $this;
+        return null;
     }

     /**
      * Get the result of the assertion.
      *
      * @return bool


12) \Humbug\Mutator\ReturnValue\This
Diff on \HylianShield\Validator\Context\Context::addIndication() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Context.php:
--- Original
+++ New
@@ @@

-        return $this;
+        return null;
     }

     /**
      * Add an assertion to the context.
      *
      * @param string $description


13) \Humbug\Mutator\Boolean\LogicalNot
Diff on \HylianShield\Validator\Context\Context::addAssertion() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Context.php:
--- Original
+++ New
@@ @@
         $this->addIndication(
-            new Assertion($description, !empty($expression))
+            new Assertion($description, empty($expression))
         );

         return $this;
     }

     /**


14) \Humbug\Mutator\ReturnValue\This
Diff on \HylianShield\Validator\Context\Context::addAssertion() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Context.php:
--- Original
+++ New
@@ @@

-        return $this;
+        return null;
     }

     /**
      * Add an intention to the context.
      *
      * @param string $description


15) \Humbug\Mutator\ReturnValue\This
Diff on \HylianShield\Validator\Context\Context::addIntention() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Context.php:
--- Original
+++ New
@@ @@

-        return $this;
+        return null;
     }

     /**
      * Add a constraint violation to the context.
      *
      * @param string $description


16) \Humbug\Mutator\ReturnValue\This
Diff on \HylianShield\Validator\Context\Context::addViolation() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Context.php:
--- Original
+++ New
@@ @@

-        return $this;
+        return null;
     }

     /**
      * Get the assertions that are registered in the current context.
      *
      * @return AssertionInterface[]


17) \Humbug\Mutator\Boolean\TrueValue
Diff on \HylianShield\Validator\Regexp::__construct() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Regexp.php:
--- Original
+++ New
@@ @@
                 'Pattern must be a string: (' . gettype($pattern) . ') '
-                . var_export($pattern, true)
+                . var_export($pattern, false)
             );
         }

         // The first character will be the delimiter.
         $delim = mb_substr($pattern, 0, 1);



18) \Humbug\Mutator\Number\IntegerValue
Diff on \HylianShield\Validator\Financial\SEPA\CreditorIdentifier::createValidator() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Financial/SEPA/CreditorIdentifier.php:
--- Original
+++ New
@@ @@
             // Numerize using A=10, B=11 ... Z=35.
-            $numerizedId = str_replace(range('A', 'Z'), range(10, 35), $numerizedIban);
+            $numerizedId = str_replace(range('A', 'Z'), range(10, 36), $numerizedIban);

             // Do the mod 97 check.
             $calccontrol = 98 - bcmod($numerizedId, 97);

             return $control === $calccontrol;
         };


19) \Humbug\Mutator\Number\IntegerValue
Diff on \HylianShield\Validator\Financial\Iban::createValidator() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Financial/Iban.php:
--- Original
+++ New
@@ @@
             // Numerize using A=10, B=11 ... Z=35.
-            $numerizedIban = str_replace(range('A', 'Z'), range(10, 35), $numerizedIban);
+            $numerizedIban = str_replace(range('A', 'Z'), range(10, 36), $numerizedIban);

             // Do the mod 97 check.
             $calccontrol = 98 - bcmod($numerizedIban, 97);

             return $control === $calccontrol;
         };


20) \Humbug\Mutator\ConditionalBoundary\LessThan
Diff on \HylianShield\Validator\OneOf::__construct() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/OneOf.php:
--- Original
+++ New
@@ @@
         // We can't have nothing to test.
-        if (count($values) < 1) {
+        if (count($values) <= 1) {
             throw new LogicException('Cannot perform a test on an empty set.');
         }

         // Register the collection identifier.
         $this->collectionIdentifier = implode(', ', $ids);
         unset($ids);


21) \Humbug\Mutator\Boolean\TrueValue
Diff on \HylianShield\Validator\Filter::__construct() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Filter.php:
--- Original
+++ New
@@ @@
     {
-        if (!in_array($this::FILTER, self::$allowedFilters, true)) {
+        if (!in_array($this::FILTER, self::$allowedFilters, false)) {
             // @codeCoverageIgnoreStart
             throw new LogicException('Invalid filter configured!');
             // @codeCoverageIgnoreEnd
         }

         $this->validator = array($this, 'filterVar');


22) \Humbug\Mutator\Boolean\TrueValue
Diff on \HylianShield\Validator\LogicalGate::__construct() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/LogicalGate.php:
--- Original
+++ New
@@ @@
                         'Supplied argument is not a valid instance: ('
-                        . gettype($instance) . ') ' . var_export($instance, true)
+                        . gettype($instance) . ') ' . var_export($instance, false)
                     );
                 }

                 return true;
             }
         );


23) \Humbug\Mutator\Number\IntegerValue
Diff on \HylianShield\Validator\Encoding\Base64::validateMessage() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Encoding/Base64.php:
--- Original
+++ New
@@ @@
         // Check all characters inside the message.
-        if (strlen($message) > 0 && !preg_match($this::PATTERN, $message)) {
+        if (strlen($message) > 1 && !preg_match($this::PATTERN, $message)) {
             // An invalid character has been found.
             return false;
         }

         // All rules are satisfied.
         return true;


24) \Humbug\Mutator\ReturnValue\FunctionCall
Diff on \HylianShield\Validator\Encoding\Base64::removeLineFeeds() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Encoding/Base64.php:
--- Original
+++ New
@@ @@
     {
-        return str_replace($this->getLineFeedCharacters(), '', $message);
+        str_replace($this->getLineFeedCharacters(), '', $message); return null;
     }

     /**
      * Validate the padding of a given message.
      *
      * @param string


25) \Humbug\Mutator\Boolean\LogicalOr
Diff on \HylianShield\Validator\Range\Mutable::__construct() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Range/Mutable.php:
--- Original
+++ New
@@ @@
         if ((isset($minLength) && !(is_int($minLength) || is_float($minLength)))
-            || (isset($maxLength) && !(is_int($maxLength) || is_float($maxLength)))
+            && (isset($maxLength) && !(is_int($maxLength) || is_float($maxLength)))
         ) {
             // @codeCoverageIgnoreStart
             throw new InvalidArgumentException(
                 'Min and max length should be of type integer or type float.'
             );
             // @codeCoverageIgnoreEnd


26) \Humbug\Mutator\ConditionalNegation\Identical
Diff on \HylianShield\Validator::validate() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator.php:
--- Original
+++ New
@@ @@

-        if ($this->lastResult === false) {
+        if ($this->lastResult !== false) {
             $this->lastContext = $context;
         }

         return $this->lastResult;
     }



27) \Humbug\Mutator\Boolean\FalseValue
Diff on \HylianShield\Validator::validate() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator.php:
--- Original
+++ New
@@ @@

-        if ($this->lastResult === false) {
+        if ($this->lastResult === true) {
             $this->lastContext = $context;
         }

         return $this->lastResult;
     }



28) \Humbug\Mutator\Boolean\TrueValue
Diff on \HylianShield\Validator::getMessage() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator.php:
--- Original
+++ New
@@ @@
                 $this->lastMessage = 'Invalid value supplied: (' . gettype($this->lastValue) . ') '
-                    . var_export($this->lastValue, true) . "; Expected: {$this}";
+                    . var_export($this->lastValue, false) . "; Expected: {$this}";
             } else {
                 $this->lastMessage = "Invalid value supplied; Expected: {$this}";
             }

             // If we have a context, use that to add some additional
             // information to our message.


29) \Humbug\Mutator\Number\IntegerValue
Diff on \HylianShield\Validator::getMessage() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator.php:
--- Original
+++ New
@@ @@
                 $violations = array();
-                $index = 1;
+                $index = 0;

                 foreach ($this->lastContext->getViolations() as $violation) {
                     $violations[] = "#{$index} {$violation}";
                     $index++;
                 }



30) \Humbug\Mutator\Increment\Increment
Diff on \HylianShield\Validator::getMessage() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator.php:
--- Original
+++ New
@@ @@
                     $violations[] = "#{$index} {$violation}";
-                    $index++;
+                    $index--;
                 }

                 if (count($violations) > 0) {
                     $this->lastMessage .= PHP_EOL
                         . 'Violations:'. PHP_EOL
                         . implode(PHP_EOL, $violations);


31) \Humbug\Mutator\ConditionalBoundary\GreaterThan
Diff on \HylianShield\Validator::getMessage() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator.php:
--- Original
+++ New
@@ @@

-                if (count($violations) > 0) {
+                if (count($violations) >= 0) {
                     $this->lastMessage .= PHP_EOL
                         . 'Violations:'. PHP_EOL
                         . implode(PHP_EOL, $violations);
                 }
             }
         }


32) \Humbug\Mutator\ConditionalNegation\GreaterThan
Diff on \HylianShield\Validator::getMessage() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator.php:
--- Original
+++ New
@@ @@

-                if (count($violations) > 0) {
+                if (count($violations) <= 0) {
                     $this->lastMessage .= PHP_EOL
                         . 'Violations:'. PHP_EOL
                         . implode(PHP_EOL, $violations);
                 }
             }
         }


33) \Humbug\Mutator\Number\IntegerValue
Diff on \HylianShield\Validator::getMessage() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator.php:
--- Original
+++ New
@@ @@

-                if (count($violations) > 0) {
+                if (count($violations) > 1) {
                     $this->lastMessage .= PHP_EOL
                         . 'Violations:'. PHP_EOL
                         . implode(PHP_EOL, $violations);
                 }
             }
         }


------
Errors
------


1) \Humbug\Mutator\Boolean\LogicalNot
Diff on \HylianShield\Validator\Context\Indication\InterpolatableIndicationAbstract::interpolate() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Indication/InterpolatableIndicationAbstract.php:
--- Original
+++ New
@@ @@
     ) {
-        if (!is_string($translation)) {
+        if (is_string($translation)) {
             throw new InvalidArgumentException(
                 'Invalid translation type supplied: ' . gettype($translation)
             );
         }

         if (!is_string($interpolationStart)) {

The following output was received on stderr:

PHP Fatal error:  Method HylianShield\Validator\Context\Indication\Violation::__toString() must not throw an exception in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Context.php on line 0
PHP Stack trace:
PHP   1. {main}() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/composer/bin/phpunit:0
PHP   2. PHPUnit_TextUI_Command::main() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/composer/bin/phpunit:63
PHP   3. PHPUnit_TextUI_Command->run() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:129
PHP   4. PHPUnit_TextUI_TestRunner->doRun() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:176
PHP   5. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/TestRunner.php:432
PHP   6. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   7. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   8. PHPUnit_Framework_TestCase->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   9. PHPUnit_Framework_TestResult->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:702
PHP  10. PHPUnit_Framework_TestCase->runBare() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestResult.php:601
PHP  11. PHPUnit_Framework_TestCase->runTest() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:746
PHP  12. ReflectionMethod->invokeArgs() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  13. HylianShield\Tests\Validator\Context\ContextTest->testStringRepresentation() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  14. HylianShield\Validator\Context\Context->__toString() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:102



2) \Humbug\Mutator\Boolean\LogicalNot
Diff on \HylianShield\Validator\Context\Indication\InterpolatableIndicationAbstract::interpolate() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Indication/InterpolatableIndicationAbstract.php:
--- Original
+++ New
@@ @@

-        if (!is_string($interpolationStart)) {
+        if (is_string($interpolationStart)) {
             throw new InvalidArgumentException(
                 'Invalid interpolationStart type supplied: '
                 . gettype($interpolationStart)
             );
         }


The following output was received on stderr:

PHP Fatal error:  Method HylianShield\Validator\Context\Indication\Violation::__toString() must not throw an exception in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Context.php on line 0
PHP Stack trace:
PHP   1. {main}() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/composer/bin/phpunit:0
PHP   2. PHPUnit_TextUI_Command::main() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/composer/bin/phpunit:63
PHP   3. PHPUnit_TextUI_Command->run() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:129
PHP   4. PHPUnit_TextUI_TestRunner->doRun() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:176
PHP   5. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/TestRunner.php:432
PHP   6. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   7. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   8. PHPUnit_Framework_TestCase->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   9. PHPUnit_Framework_TestResult->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:702
PHP  10. PHPUnit_Framework_TestCase->runBare() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestResult.php:601
PHP  11. PHPUnit_Framework_TestCase->runTest() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:746
PHP  12. ReflectionMethod->invokeArgs() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  13. HylianShield\Tests\Validator\Context\ContextTest->testStringRepresentation() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  14. HylianShield\Validator\Context\Context->__toString() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:102



3) \Humbug\Mutator\Boolean\LogicalNot
Diff on \HylianShield\Validator\Context\Indication\InterpolatableIndicationAbstract::interpolate() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Indication/InterpolatableIndicationAbstract.php:
--- Original
+++ New
@@ @@

-        if (!is_string($interpolationEnd)) {
+        if (is_string($interpolationEnd)) {
             throw new InvalidArgumentException(
                 'Invalid interpolationEnd type supplied: '
                 . gettype($interpolationEnd)
             );
         }


The following output was received on stderr:

PHP Fatal error:  Method HylianShield\Validator\Context\Indication\Violation::__toString() must not throw an exception in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Context.php on line 0
PHP Stack trace:
PHP   1. {main}() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/composer/bin/phpunit:0
PHP   2. PHPUnit_TextUI_Command::main() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/composer/bin/phpunit:63
PHP   3. PHPUnit_TextUI_Command->run() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:129
PHP   4. PHPUnit_TextUI_TestRunner->doRun() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:176
PHP   5. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/TestRunner.php:432
PHP   6. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   7. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   8. PHPUnit_Framework_TestCase->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   9. PHPUnit_Framework_TestResult->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:702
PHP  10. PHPUnit_Framework_TestCase->runBare() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestResult.php:601
PHP  11. PHPUnit_Framework_TestCase->runTest() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:746
PHP  12. ReflectionMethod->invokeArgs() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  13. HylianShield\Tests\Validator\Context\ContextTest->testStringRepresentation() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  14. HylianShield\Validator\Context\Context->__toString() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:102



4) \Humbug\Mutator\Boolean\LogicalNot
Diff on \HylianShield\Validator\Context\Indication\Violation::getCode() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Indication/Violation.php:
--- Original
+++ New
@@ @@
     {
-        if (!isset($this->code)) {
+        if (isset($this->code)) {
             throw new \LogicException(
                 'Missing property code.'
             );
         }

         return $this->code;

The following output was received on stderr:

PHP Fatal error:  Method HylianShield\Validator\Context\Indication\Violation::__toString() must not throw an exception in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Context.php on line 0
PHP Stack trace:
PHP   1. {main}() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/composer/bin/phpunit:0
PHP   2. PHPUnit_TextUI_Command::main() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/composer/bin/phpunit:63
PHP   3. PHPUnit_TextUI_Command->run() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:129
PHP   4. PHPUnit_TextUI_TestRunner->doRun() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:176
PHP   5. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/TestRunner.php:432
PHP   6. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   7. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   8. PHPUnit_Framework_TestCase->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   9. PHPUnit_Framework_TestResult->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:702
PHP  10. PHPUnit_Framework_TestCase->runBare() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestResult.php:601
PHP  11. PHPUnit_Framework_TestCase->runTest() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:746
PHP  12. ReflectionMethod->invokeArgs() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  13. HylianShield\Tests\Validator\Context\ContextTest->testStringRepresentation() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  14. HylianShield\Validator\Context\Context->__toString() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:102



5) \Humbug\Mutator\Boolean\LogicalNot
Diff on \HylianShield\Validator\Context\Indication\Violation::getContext() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Indication/Violation.php:
--- Original
+++ New
@@ @@
     {
-        if (!isset($this->context)) {
+        if (isset($this->context)) {
             throw new LogicException(
                 'Missing property context.'
             );
         }

         return $this->context;

The following output was received on stderr:

PHP Fatal error:  Method HylianShield\Validator\Context\Indication\Violation::__toString() must not throw an exception in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Context.php on line 0
PHP Stack trace:
PHP   1. {main}() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/composer/bin/phpunit:0
PHP   2. PHPUnit_TextUI_Command::main() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/composer/bin/phpunit:63
PHP   3. PHPUnit_TextUI_Command->run() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:129
PHP   4. PHPUnit_TextUI_TestRunner->doRun() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:176
PHP   5. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/TestRunner.php:432
PHP   6. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   7. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   8. PHPUnit_Framework_TestCase->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   9. PHPUnit_Framework_TestResult->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:702
PHP  10. PHPUnit_Framework_TestCase->runBare() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestResult.php:601
PHP  11. PHPUnit_Framework_TestCase->runTest() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:746
PHP  12. ReflectionMethod->invokeArgs() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  13. HylianShield\Tests\Validator\Context\ContextTest->testStringRepresentation() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  14. HylianShield\Validator\Context\Context->__toString() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:102



6) \Humbug\Mutator\Boolean\LogicalNot
Diff on \HylianShield\Validator\Context\Indication\Assertion::getResult() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Indication/Assertion.php:
--- Original
+++ New
@@ @@
     {
-        if (!isset($this->result)) {
+        if (isset($this->result)) {
             throw new LogicException(
                 'Missing property result.'
             );
         }

         return $this->result;

The following output was received on stderr:

PHP Fatal error:  Method HylianShield\Validator\Context\Indication\Assertion::__toString() must not throw an exception in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator/Context/Context.php on line 0
PHP Stack trace:
PHP   1. {main}() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/composer/bin/phpunit:0
PHP   2. PHPUnit_TextUI_Command::main() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/composer/bin/phpunit:63
PHP   3. PHPUnit_TextUI_Command->run() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:129
PHP   4. PHPUnit_TextUI_TestRunner->doRun() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:176
PHP   5. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/TestRunner.php:432
PHP   6. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   7. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   8. PHPUnit_Framework_TestCase->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   9. PHPUnit_Framework_TestResult->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:702
PHP  10. PHPUnit_Framework_TestCase->runBare() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestResult.php:601
PHP  11. PHPUnit_Framework_TestCase->runTest() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:746
PHP  12. ReflectionMethod->invokeArgs() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  13. HylianShield\Tests\Validator\Context\ContextTest->testStringRepresentation() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  14. HylianShield\Validator\Context\Context->__toString() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:102



7) \Humbug\Mutator\ReturnValue\NewObject
Diff on \HylianShield\Validator::createContext() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator.php:
--- Original
+++ New
@@ @@
     {
-        return new Context();
+        new Context(); return null;
     }

     /**
      * Validate the supplied value against the current validator.
      *
      * @param mixed $value

The following output was received on stderr:

PHP Fatal error:  Call to a member function addAssertion() on a non-object in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator.php on line 92
PHP Stack trace:
PHP   1. {main}() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/composer/bin/phpunit:0
PHP   2. PHPUnit_TextUI_Command::main() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/composer/bin/phpunit:63
PHP   3. PHPUnit_TextUI_Command->run() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:129
PHP   4. PHPUnit_TextUI_TestRunner->doRun() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:176
PHP   5. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/TestRunner.php:432
PHP   6. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   7. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   8. PHPUnit_Framework_TestCase->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   9. PHPUnit_Framework_TestResult->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:702
PHP  10. PHPUnit_Framework_TestCase->runBare() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestResult.php:601
PHP  11. PHPUnit_Framework_TestCase->runTest() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:746
PHP  12. ReflectionMethod->invokeArgs() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  13. HylianShield\Tests\Validator\LogicalNotTest->testValidators() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  14. HylianShield\Validator->validate() /home/mark/Projects/talks/mutating-php/examples/validator/test/HylianShield/Tests/Validator/LogicalNotTest.php:54



8) \Humbug\Mutator\Boolean\LogicalNot
Diff on \HylianShield\Validator::validate() in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator.php:
--- Original
+++ New
@@ @@
     {
-        if (!isset($context)) {
+        if (isset($context)) {
             $context = $this::createContext();
         }

         $this->lastValue = $value;
         $this->lastMessage = null;
         $this->lastContext = null;

The following output was received on stderr:

PHP Fatal error:  Call to a member function addAssertion() on a non-object in /home/mark/Projects/talks/mutating-php/examples/validator/src/HylianShield/Validator.php on line 92
PHP Stack trace:
PHP   1. {main}() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/composer/bin/phpunit:0
PHP   2. PHPUnit_TextUI_Command::main() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/composer/bin/phpunit:63
PHP   3. PHPUnit_TextUI_Command->run() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:129
PHP   4. PHPUnit_TextUI_TestRunner->doRun() /home/mark/Projects/talks/mutating-php/examples/validator/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:176
PHP   5. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/TextUI/TestRunner.php:432
PHP   6. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   7. PHPUnit_Framework_TestSuite->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   8. PHPUnit_Framework_TestCase->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestSuite.php:735
PHP   9. PHPUnit_Framework_TestResult->run() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:702
PHP  10. PHPUnit_Framework_TestCase->runBare() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestResult.php:601
PHP  11. PHPUnit_Framework_TestCase->runTest() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:746
PHP  12. ReflectionMethod->invokeArgs() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  13. HylianShield\Tests\Validator\LogicalNotTest->testValidators() /home/mark/.composer/vendor/phpunit/phpunit/src/Framework/TestCase.php:881
PHP  14. HylianShield\Validator->validate() /home/mark/Projects/talks/mutating-php/examples/validator/test/HylianShield/Tests/Validator/LogicalNotTest.php:54


